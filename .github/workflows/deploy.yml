
name: 🚀 Deploy to Production

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: pdo, pdo_mysql, bcmath, ctype, fileinfo, json, mbstring, openssl, tokenizer, xml

    - name: 📦 Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: 📦 Install PHP dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: 🗂️ Create environment file
      run: |
        if [ -f ".env.ci" ]; then
          cp .env.ci .env
        else
          cp .env.example .env 2>/dev/null || echo "APP_NAME=Laravel
APP_ENV=testing
APP_KEY=base64:test-key-for-ci-testing-only
APP_DEBUG=true
APP_URL=http://localhost
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=test_db
DB_USERNAME=root
DB_PASSWORD=root
CACHE_DRIVER=array
SESSION_DRIVER=array
QUEUE_CONNECTION=sync
MAIL_MAILER=array" > .env
        fi

    - name: 🔑 Generate application key
      run: php artisan key:generate --force

    - name: ⏳ Wait for MySQL
      run: |
        echo "Waiting for MySQL to be ready..."
        for i in {1..30}; do
          if mysql -h 127.0.0.1 -P 3306 -u root -proot -e "SELECT 1" >/dev/null 2>&1; then
            echo "MySQL is ready!"
            break
          fi
          echo "Waiting for MySQL... ($i/30)"
          sleep 2
        done

    - name: 🗃️ Run database migrations
      run: php artisan migrate --force
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: test_db
        DB_USERNAME: root
        DB_PASSWORD: root

    - name: 🧪 Run tests
      run: php artisan test --verbose
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: test_db
        DB_USERNAME: root
        DB_PASSWORD: root

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐘 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: pdo, pdo_mysql, bcmath, ctype, fileinfo, json, mbstring, openssl, tokenizer, xml

    - name: 📦 Install PHP dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader --no-dev

    - name: 🎨 Build assets (si vous utilisez Vite)
      run: |
        npm install
        npm run build

    - name: 🚀 Deploy to server via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          # Aller dans le dossier du projet
          cd ${{ secrets.PROJECT_PATH }}

          # Créer un backup du .env actuel
          cp .env .env.backup.$(date +%Y%m%d_%H%M%S)

          # Créer un backup de la base de données
          php artisan backup:database || echo "Backup command not available"

          echo "🔄 Déploiement en cours..."

    - name: 📤 Upload files via SCP
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        source: ".,!.git,!.github,node_modules,vendor"
        target: ${{ secrets.PROJECT_PATH }}
        strip_components: 0
        overwrite: true

    - name: ⚙️ Run deployment commands on server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        script: |
          cd ${{ secrets.PROJECT_PATH }}

          echo "🔧 Installation des dépendances..."
          composer install --no-dev --optimize-autoloader

          echo "🔑 Génération de la clé d'application..."
          php artisan key:generate

          echo "🗂️ Cache clearing..."
          php artisan config:clear
          php artisan cache:clear
          php artisan view:clear
          php artisan route:clear

          echo "🗃️ Migrations de base de données..."
          php artisan migrate --force

          echo "⚡ Optimisation..."
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

          echo "🔒 Permissions..."
          chmod -R 755 storage
          chmod -R 755 bootstrap/cache
          chown -R www-data:www-data . || chown -R apache:apache . || echo "Propriétaire non modifié"

          echo "✅ Déploiement terminé avec succès !"

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()

    steps:
    - name: 📢 Notification de déploiement
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: "Déploiement ${{ job.status == 'success' && 'réussi ✅' || 'échoué ❌' }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
