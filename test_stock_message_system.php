<?php

/**
 * Test du syst√®me de messages li√©s au stock
 *
 * Ce fichier teste la relation entre les messages admin et le niveau de stock
 * pour v√©rifier si le syst√®me d'alerte fonctionne correctement.
 */

// Initialiser Laravel
require_once 'vendor/autoload.php';

$app = require_once 'bootstrap/app.php';
$app->make('Illuminate\Contracts\Console\Kernel')->bootstrap();

use App\Models\Product;
use App\Models\AdminMessage;
use App\Models\Category;

// Configuration de base
$testResults = [];
$errors = [];

echo "=== TEST DU SYST√àME DE MESSAGES LI√âS AU STOCK ===\n\n";

try {
    // Test 1: V√©rifier la structure de la base de donn√©es
    echo "1. V√©rification de la structure de la base de donn√©es...\n";

    // V√©rifier si la table produits a le champ quantite_stock
    $product = Product::first();
    if ($product && isset($product->quantite_stock)) {
        echo "   ‚úÖ Champ quantite_stock trouv√© dans la table produits\n";
        $testResults['structure'] = 'PASS';
    } else {
        echo "   ‚ùå Champ quantite_stock manquant dans la table produits\n";
        $testResults['structure'] = 'FAIL';
        $errors[] = 'Champ quantite_stock manquant';
    }

    // V√©rifier si la table admin_messages existe
    $message = AdminMessage::first();
    if ($message) {
        echo "   ‚úÖ Table admin_messages accessible\n";
        $testResults['messages_table'] = 'PASS';
    } else {
        echo "   ‚ùå Table admin_messages inaccessible\n";
        $testResults['messages_table'] = 'FAIL';
        $errors[] = 'Table admin_messages inaccessible';
    }

    echo "\n2. Test des niveaux de stock...\n";

    // Test des diff√©rents niveaux de stock
    $stockLevels = [
        'faible' => 3,
        'moyen' => 15,
        'bon' => 25,
        'rupture' => 0
    ];

    foreach ($stockLevels as $level => $quantity) {
        $products = Product::where('quantite_stock', '<=', $quantity)->get();
        if ($level === 'faible') {
            $products = Product::where('quantite_stock', '<=', 5)->get();
        } elseif ($level === 'moyen') {
            $products = Product::where('quantite_stock', '>', 5)->where('quantite_stock', '<=', 20)->get();
        } elseif ($level === 'bon') {
            $products = Product::where('quantite_stock', '>', 20)->get();
        } elseif ($level === 'rupture') {
            $products = Product::where('quantite_stock', '<=', 0)->get();
        }

        echo "   {$level}: {$products->count()} produits\n";
        $testResults["stock_level_{$level}"] = 'PASS';
    }

    echo "\n3. Test de cr√©ation de messages li√©s au stock...\n";

    // Cr√©er un message d'alerte pour stock faible
    try {
        $stockAlertMessage = AdminMessage::create([
            'title' => 'Alerte Stock Faible',
            'message' => 'Certains produits ont un stock faible. V√©rifiez les niveaux de stock.',
            'type' => 'warning',
            'priority' => 'high',
            'is_active' => true,
            'target_roles' => ['seller', 'admin']
        ]);

        if ($stockAlertMessage) {
            echo "   ‚úÖ Message d'alerte stock cr√©√© avec succ√®s (ID: {$stockAlertMessage->id})\n";
            $testResults['message_creation'] = 'PASS';

            // Nettoyer le message de test
            $stockAlertMessage->delete();
            echo "   üßπ Message de test supprim√©\n";
        }
    } catch (Exception $e) {
        echo "   ‚ùå Erreur lors de la cr√©ation du message: " . $e->getMessage() . "\n";
        $testResults['message_creation'] = 'FAIL';
        $errors[] = 'Erreur cr√©ation message: ' . $e->getMessage();
    }

    echo "\n4. Test de la logique m√©tier...\n";

    // V√©rifier s'il y a des produits avec stock faible
    $lowStockProducts = Product::where('quantite_stock', '<=', 5)->get();
    $outOfStockProducts = Product::where('quantite_stock', '<=', 0)->get();

    if ($lowStockProducts->count() > 0) {
        echo "   ‚ö†Ô∏è  {$lowStockProducts->count()} produits avec stock faible d√©tect√©s\n";
        foreach ($lowStockProducts->take(3) as $product) {
            echo "      - {$product->name}: {$product->quantite_stock} unit√©s\n";
        }
        $testResults['low_stock_detection'] = 'PASS';
    } else {
        echo "   ‚úÖ Aucun produit avec stock faible\n";
        $testResults['low_stock_detection'] = 'PASS';
    }

    if ($outOfStockProducts->count() > 0) {
        echo "   üö® {$outOfStockProducts->count()} produits en rupture de stock\n";
        foreach ($outOfStockProducts->take(3) as $product) {
            echo "      - {$product->name}: {$product->quantite_stock} unit√©s\n";
        }
        $testResults['out_of_stock_detection'] = 'PASS';
    } else {
        echo "   ‚úÖ Aucun produit en rupture de stock\n";
        $testResults['out_of_stock_detection'] = 'PASS';
    }

    echo "\n5. Test des indicateurs visuels...\n";

    // Tester la logique des indicateurs de stock
    $testProduct = Product::first();
    if ($testProduct) {
        $stockLevel = '';
        $cssClass = '';

        if ($testProduct->quantite_stock <= 5) {
            $stockLevel = 'Faible';
            $cssClass = 'bg-red-100 text-red-800';
        } elseif ($testProduct->quantite_stock <= 20) {
            $stockLevel = 'Moyen';
            $cssClass = 'bg-yellow-100 text-yellow-800';
        } else {
            $stockLevel = 'Bon';
            $cssClass = 'bg-green-100 text-green-800';
        }

        echo "   ‚úÖ Indicateur de stock fonctionnel: {$stockLevel} ({$testProduct->quantite_stock} unit√©s)\n";
        echo "      Classe CSS: {$cssClass}\n";
        $testResults['visual_indicators'] = 'PASS';
    } else {
        echo "   ‚ùå Aucun produit trouv√© pour tester les indicateurs\n";
        $testResults['visual_indicators'] = 'FAIL';
        $errors[] = 'Aucun produit pour tester les indicateurs';
    }

} catch (Exception $e) {
    echo "‚ùå Erreur g√©n√©rale: " . $e->getMessage() . "\n";
    $errors[] = 'Erreur g√©n√©rale: ' . $e->getMessage();
}

// R√©sum√© des tests
echo "\n=== R√âSUM√â DES TESTS ===\n";
$passedTests = array_count_values($testResults)['PASS'] ?? 0;
$totalTests = count($testResults);

echo "Tests r√©ussis: {$passedTests}/{$totalTests}\n";

if (!empty($errors)) {
    echo "\n‚ùå Erreurs d√©tect√©es:\n";
    foreach ($errors as $error) {
        echo "   - {$error}\n";
    }
} else {
    echo "\n‚úÖ Tous les tests sont pass√©s avec succ√®s!\n";
}

echo "\n=== RECOMMANDATIONS ===\n";

if ($passedTests === $totalTests) {
    echo "‚úÖ Le syst√®me de base fonctionne correctement\n";
    echo "üí° Suggestions d'am√©lioration:\n";
    echo "   1. Ajouter des notifications automatiques pour stock faible\n";
    echo "   2. Cr√©er des messages automatiques li√©s au niveau de stock\n";
    echo "   3. Impl√©menter un syst√®me d'alerte en temps r√©el\n";
    echo "   4. Ajouter des rapports de stock quotidiens\n";
} else {
    echo "‚ö†Ô∏è  Certains tests ont √©chou√©\n";
    echo "üîß Actions recommand√©es:\n";
    echo "   1. V√©rifier la structure de la base de donn√©es\n";
    echo "   2. Contr√¥ler les migrations\n";
    echo "   3. V√©rifier les mod√®les et relations\n";
}

echo "\n=== FIN DU TEST ===\n";
